// src/components/ui/TestimonialCarousel.tsx
import React, { useEffect, useRef, useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { ArrowLeft, ArrowRight, Quote, X } from "lucide-react";
import { cn } from "@/lib/utils";

// ===== Types and Interfaces =====
// Exporting this interface so DisciplesSection can use it
export interface iTestimonial {
  name: string;
  designation: string; // We'll use a default or map from description if needed
  description: string;
  profileImage: string; // Map from image_url
}

interface iCarouselProps {
  items: React.ReactElement<{
    testimonial: iTestimonial;
    index: number;
    layout?: boolean;
    onCardClose: () => void;
  }>[];
  initialScroll?: number;
}

// ===== Custom Hooks =====
const useOutsideClick = (
  ref: React.RefObject<HTMLDivElement | null>,
  onOutsideClick: () => void,
) => {
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent | TouchEvent) => {
      if (!ref.current || ref.current.contains(event.target as Node)) {
        return;
      }
      onOutsideClick();
    };

    document.addEventListener("mousedown", handleClickOutside);
    document.addEventListener("touchstart", handleClickOutside);

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
      document.removeEventListener("touchstart", handleClickOutside);
    };
  }, [ref, onOutsideClick]);
};

// ===== Components =====
const Carousel = ({ items, initialScroll = 0 }: iCarouselProps) => {
  const carouselRef = React.useRef<HTMLDivElement>(null);
  const [canScrollLeft, setCanScrollLeft] = React.useState(false);
  const [canScrollRight, setCanScrollRight] = React.useState(true);

  const checkScrollability = () => {
    if (carouselRef.current) {
      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;
      setCanScrollLeft(scrollLeft > 0);
      setCanScrollRight(scrollLeft < scrollWidth - clientWidth);
    }
  };

  const handleScrollLeft = () => {
    if (carouselRef.current) {
      carouselRef.current.scrollBy({ left: -300, behavior: "smooth" });
    }
  };

  const handleScrollRight = () => {
    if (carouselRef.current) {
      carouselRef.current.scrollBy({ left: 300, behavior: "smooth" });
    }
  };

  const handleCardClose = (index: number) => {
    if (carouselRef.current) {
      const cardWidth = isMobile() ? 230 : 384; // Adjust these widths if needed
      const gap = isMobile() ? 4 : 8; // Adjust gap if needed
      const scrollPosition = (cardWidth + gap) * (index + 1); // Simplified scroll logic
      carouselRef.current.scrollTo({
        left: scrollPosition,
        behavior: "smooth",
      });
    }
  };

  // Keep isMobile simple for now, might need refinement
  const isMobile = () => {
    return window && window.innerWidth < 768;
  };

  useEffect(() => {
    if (carouselRef.current) {
      carouselRef.current.scrollLeft = initialScroll;
      checkScrollability();
      // Add event listener for resize to recheck scrollability
      window.addEventListener('resize', checkScrollability);
    }
    return () => window.removeEventListener('resize', checkScrollability);
  }, [initialScroll]);

  return (
    <div className="relative w-full mt-10">
      <div
        className="flex w-full overflow-x-auto scroll-smooth [scrollbar-width:none] py-5" // Changed overflow-x-scroll to overflow-x-auto
        ref={carouselRef}
        onScroll={checkScrollability}
      >
        {/* Removed absolute positioned gradient divs for simplicity, can be added back if needed */}
        <div
          className={cn(
            "flex flex-row justify-start gap-4 pl-3",
            "max-w-7xl mx-auto", // Changed max-width to 7xl for wider content
          )}
        >
          {items.map((item, index) => {
            return (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{
                  opacity: 1,
                  y: 0,
                  transition: {
                    duration: 0.5,
                    delay: 0.2 * index,
                    ease: "easeOut",
                  },
                }}
                key={`card-${index}`}
                className="last:pr-[5%] md:last:pr-[33%] rounded-3xl shrink-0" // Added shrink-0
              >
                {React.cloneElement(item, {
                  onCardClose: () => handleCardClose(index), // Pass index correctly
                })}
              </motion.div>
            );
          })}
        </div>
      </div>
      <div className="flex justify-center md:justify-end gap-2 mt-4"> {/* Centered buttons on mobile */}
        <button
          className="relative z-40 h-10 w-10 rounded-full bg-primary/80 flex items-center justify-center disabled:opacity-50 hover:bg-primary transition-colors duration-200" // Adjusted colors
          onClick={handleScrollLeft}
          disabled={!canScrollLeft}
          aria-label="Scroll Left"
        >
          <ArrowLeft className="h-6 w-6 text-primary-foreground" />
        </button>
        <button
          className="relative z-40 h-10 w-10 rounded-full bg-primary/80 flex items-center justify-center disabled:opacity-50 hover:bg-primary transition-colors duration-200" // Adjusted colors
          onClick={handleScrollRight}
          disabled={!canScrollRight}
          aria-label="Scroll Right"
        >
          <ArrowRight className="h-6 w-6 text-primary-foreground" />
        </button>
      </div>
    </div>
  );
};

// Renamed props for clarity
interface TestimonialCardProps {
  discipleData: iTestimonial; // Changed prop name
  index: number;
  layout?: boolean;
  onCardClose?: () => void;
  backgroundImage?: string;
}

// Adjusted TestimonialCard props and structure
const TestimonialCard = ({
  discipleData, // Use discipleData
  index,
  layout = true, // Enable layout animation by default
  onCardClose = () => {},
  backgroundImage = "https://source.unsplash.com/random/400x600?abstract,gradient", // Generic background
}: TestimonialCardProps) => { // Use updated props interface
  const [isExpanded, setIsExpanded] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const handleExpand = () => setIsExpanded(true);
  const handleCollapse = () => {
    setIsExpanded(false);
    if (onCardClose) onCardClose(); // Ensure onCardClose is called
  };

   // Simplified useEffect for body scroll lock
  useEffect(() => {
    const handleEscapeKey = (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        handleCollapse();
      }
    };

    if (isExpanded) {
      document.body.style.overflow = "hidden"; // Simple overflow hidden
      window.addEventListener("keydown", handleEscapeKey);
    } else {
       document.body.style.overflow = ""; // Restore scroll
    }

    return () => {
       document.body.style.overflow = ""; // Ensure scroll is restored on unmount
       window.removeEventListener("keydown", handleEscapeKey);
    };
  }, [isExpanded]);


  useOutsideClick(containerRef, handleCollapse);

  return (
    <>
      <AnimatePresence>
        {isExpanded && (
          <div className="fixed inset-0 h-screen overflow-hidden z-50 flex items-center justify-center p-4"> {/* Centering modal */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="bg-black/80 backdrop-blur-sm h-full w-full fixed inset-0" // Adjusted background
              onClick={handleCollapse} // Close on overlay click
            />
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              ref={containerRef}
              layoutId={layout ? `card-${discipleData.name}` : undefined}
              className="w-full max-w-3xl mx-auto bg-gradient-to-b from-card to-muted/50 h-auto max-h-[90vh] z-[60] p-6 md:p-10 rounded-3xl relative overflow-y-auto shadow-xl" // Adjusted styles for modal
            >
              <button
                className="sticky top-4 right-4 h-8 w-8 rounded-full flex items-center justify-center bg-primary/80 hover:bg-primary text-primary-foreground z-10" // Adjusted close button
                onClick={handleCollapse}
                aria-label="Close"
              >
                <X className="h-5 w-5" />
              </button>
              {/* Modal Content */}
              <div className="flex flex-col md:flex-row gap-6 items-start">
                 <motion.div layoutId={layout ? `profile-${discipleData.name}` : undefined} className="shrink-0">
                    <ProfileImage src={discipleData.profileImage} alt={discipleData.name} className="w-32 h-32 md:w-48 md:h-48" /> {/* Larger image in modal */}
                 </motion.div>
                 <div className="flex-grow">
                     <motion.p
                        layoutId={layout ? `designation-${discipleData.name}` : undefined} // Changed layoutId key
                        className="text-muted-foreground text-sm md:text-base font-medium" // Adjusted styles
                     >
                        {discipleData.designation}
                     </motion.p>
                     <motion.p
                        layoutId={layout ? `name-${discipleData.name}` : undefined} // Changed layoutId key
                        className="text-2xl md:text-3xl font-semibold text-foreground mt-1" // Adjusted styles
                     >
                        {discipleData.name}
                     </motion.p>
                     <div className="py-4 text-foreground/80 text-base md:text-lg leading-relaxed mt-4 border-t border-border">
                        <Quote className="h-5 w-5 text-primary inline-block mr-2 mb-1" />
                        {discipleData.description}
                     </div>
                 </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>

      {/* Card View */}
      <motion.button
        layoutId={layout ? `card-${discipleData.name}` : undefined}
        onClick={handleExpand}
        className="block text-left" // Ensure button behaves like a block and text aligns left
        whileHover={{
          y: -5, // Lift effect on hover
          transition: { duration: 0.2, ease: "easeOut" },
        }}
        whileTap={{ scale: 0.98 }}
      >
        <div
          className={cn(
            `rounded-3xl bg-gradient-to-b from-card to-muted/30 h-[400px] md:h-[450px] w-72 md:w-80`, // Adjusted size and background
            `overflow-hidden flex flex-col items-center justify-start relative z-10 shadow-md hover:shadow-lg transition-shadow p-6 text-center`, // Added padding and text-center
            `border border-border/20` // Added subtle border
          )}
        >
           {/* Background Image - optional */}
           {/*
           <div className="absolute inset-0 opacity-10 -z-10">
             <img
               className="block w-full h-full object-center object-cover"
               src={backgroundImage}
               alt="Background layer"
             />
           </div>
           */}

          {/* Profile Image with Layout ID */}
          <motion.div layoutId={layout ? `profile-${discipleData.name}` : undefined} className="mt-4">
             <ProfileImage src={discipleData.profileImage} alt={discipleData.name} className="w-24 h-24 md:w-32 md:h-32"/> {/* Adjusted size */}
          </motion.div>

          {/* Name with Layout ID */}
          <motion.p
            layoutId={layout ? `name-${discipleData.name}` : undefined} // Changed layoutId key
            className="text-foreground text-xl md:text-2xl font-semibold mt-4" // Adjusted styles
          >
            {discipleData.name}
          </motion.p>

           {/* Designation with Layout ID */}
          <motion.p
            layoutId={layout ? `designation-${discipleData.name}` : undefined} // Changed layoutId key
            className="text-muted-foreground text-sm md:text-base mt-1" // Adjusted styles
          >
             {discipleData.designation.length > 35 // Truncate designation if too long
                ? `${discipleData.designation.slice(0, 35)}...`
                : discipleData.designation}
          </motion.p>

          {/* Description (Truncated) - No Layout ID needed here */}
          <p className="text-foreground/70 text-sm md:text-base mt-4 flex-grow overflow-hidden">
             {discipleData.description.length > 100 // Truncate description
                ? `${discipleData.description.slice(0, 100)}...`
                : discipleData.description}
          </p>

        </div>
      </motion.button>
    </>
  );
};

// Adapted ProfileImage component
const ProfileImage = ({ src, alt, className, ...rest }: React.ImgHTMLAttributes<HTMLImageElement>) => {
  const [isLoading, setLoading] = useState(true);

  return (
    <div className={cn(
        "opacity-90 overflow-hidden rounded-full border-2 border-primary/20 aspect-square flex-none relative shadow-sm", // Adjusted styles
         className // Allow overriding size
        )}>
      <img
        className={cn(
          "transition duration-300 absolute inset-0 w-full h-full object-cover",
          isLoading ? "blur-sm scale-110" : "blur-0 scale-100", // Added scale effect
        )}
        onLoad={() => setLoading(false)}
        src={src || "https://source.unsplash.com/random/150x150?placeholder"} // Default placeholder
        alt={alt || "Profile image"}
        loading="lazy"
        decoding="async"
        {...rest}
      />
       {/* Loading skeleton overlay */}
       {isLoading && <div className="absolute inset-0 bg-muted animate-pulse"></div>}
    </div>
  );
};


// Export the components
export { Carousel, TestimonialCard, ProfileImage };
